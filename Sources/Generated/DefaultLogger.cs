//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class DefaultLogger : Logger {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal DefaultLogger(global::System.IntPtr cPtr, bool cMemoryOwn) : base(assimp_swigPINVOKE.DefaultLogger_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DefaultLogger obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static Logger create(string name, Logger.LogSeverity severity, aiDefaultLogStream defStreams, IOSystem io) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.DefaultLogger_create__SWIG_0(name, (int)severity, (uint)defStreams, IOSystem.getCPtr(io));
    Logger ret = (cPtr == global::System.IntPtr.Zero) ? null : new Logger(cPtr, false);
    return ret;
  }

  public static Logger create(string name, Logger.LogSeverity severity, aiDefaultLogStream defStreams) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.DefaultLogger_create__SWIG_1(name, (int)severity, (uint)defStreams);
    Logger ret = (cPtr == global::System.IntPtr.Zero) ? null : new Logger(cPtr, false);
    return ret;
  }

  public static Logger create(string name, Logger.LogSeverity severity) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.DefaultLogger_create__SWIG_2(name, (int)severity);
    Logger ret = (cPtr == global::System.IntPtr.Zero) ? null : new Logger(cPtr, false);
    return ret;
  }

  public static Logger create(string name) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.DefaultLogger_create__SWIG_3(name);
    Logger ret = (cPtr == global::System.IntPtr.Zero) ? null : new Logger(cPtr, false);
    return ret;
  }

  public static Logger create() {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.DefaultLogger_create__SWIG_4();
    Logger ret = (cPtr == global::System.IntPtr.Zero) ? null : new Logger(cPtr, false);
    return ret;
  }

  public static void set(Logger logger) {
    assimp_swigPINVOKE.DefaultLogger_set(Logger.getCPtr(logger));
  }

  public static Logger get() {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.DefaultLogger_get();
    Logger ret = (cPtr == global::System.IntPtr.Zero) ? null : new Logger(cPtr, false);
    return ret;
  }

  public static bool isNullLogger() {
    bool ret = assimp_swigPINVOKE.DefaultLogger_isNullLogger();
    return ret;
  }

  public static void kill() {
    assimp_swigPINVOKE.DefaultLogger_kill();
  }

  public override bool attachStream(LogStream pStream, Logger.ErrorSeverity severity) {
    bool ret = assimp_swigPINVOKE.DefaultLogger_attachStream(swigCPtr, LogStream.getCPtr(pStream), (uint)severity);
    return ret;
  }

  public override bool detatchStream(LogStream pStream, Logger.ErrorSeverity severity) {
    bool ret = assimp_swigPINVOKE.DefaultLogger_detatchStream(swigCPtr, LogStream.getCPtr(pStream), (uint)severity);
    return ret;
  }

}

}
