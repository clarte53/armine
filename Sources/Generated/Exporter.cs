//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class Exporter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Exporter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Exporter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Exporter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_Exporter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Exporter() : this(assimp_swigPINVOKE.new_Exporter(), true) {
  }

  public void SetIOHandler(IOSystem pIOHandler) {
    assimp_swigPINVOKE.Exporter_SetIOHandler(swigCPtr, IOSystem.getCPtr(pIOHandler));
  }

  public IOSystem GetIOHandler() {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Exporter_GetIOHandler(swigCPtr);
    IOSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new IOSystem(cPtr, false);
    return ret;
  }

  public bool IsDefaultIOHandler() {
    bool ret = assimp_swigPINVOKE.Exporter_IsDefaultIOHandler(swigCPtr);
    return ret;
  }

  public void SetProgressHandler(ProgressHandler pHandler) {
    assimp_swigPINVOKE.Exporter_SetProgressHandler(swigCPtr, ProgressHandler.getCPtr(pHandler));
  }

  public aiExportDataBlob ExportToBlob(aiScene pScene, string pFormatId, aiPostProcessSteps pPreprocessing, ExportProperties pProperties) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Exporter_ExportToBlob__SWIG_0(swigCPtr, aiScene.getCPtr(pScene), pFormatId, (uint)pPreprocessing, ExportProperties.getCPtr(pProperties));
    aiExportDataBlob ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiExportDataBlob(cPtr, false);
    return ret;
  }

  public aiExportDataBlob ExportToBlob(aiScene pScene, string pFormatId, aiPostProcessSteps pPreprocessing) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Exporter_ExportToBlob__SWIG_1(swigCPtr, aiScene.getCPtr(pScene), pFormatId, (uint)pPreprocessing);
    aiExportDataBlob ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiExportDataBlob(cPtr, false);
    return ret;
  }

  public aiExportDataBlob ExportToBlob(aiScene pScene, string pFormatId) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Exporter_ExportToBlob__SWIG_2(swigCPtr, aiScene.getCPtr(pScene), pFormatId);
    aiExportDataBlob ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiExportDataBlob(cPtr, false);
    return ret;
  }

  public aiReturn Export(aiScene pScene, string pFormatId, string pPath, aiPostProcessSteps pPreprocessing, ExportProperties pProperties) {
    aiReturn ret = (aiReturn)assimp_swigPINVOKE.Exporter_Export__SWIG_0(swigCPtr, aiScene.getCPtr(pScene), pFormatId, pPath, (uint)pPreprocessing, ExportProperties.getCPtr(pProperties));
    return ret;
  }

  public aiReturn Export(aiScene pScene, string pFormatId, string pPath, aiPostProcessSteps pPreprocessing) {
    aiReturn ret = (aiReturn)assimp_swigPINVOKE.Exporter_Export__SWIG_1(swigCPtr, aiScene.getCPtr(pScene), pFormatId, pPath, (uint)pPreprocessing);
    return ret;
  }

  public aiReturn Export(aiScene pScene, string pFormatId, string pPath) {
    aiReturn ret = (aiReturn)assimp_swigPINVOKE.Exporter_Export__SWIG_2(swigCPtr, aiScene.getCPtr(pScene), pFormatId, pPath);
    return ret;
  }

  public string GetErrorString() {
    string ret = assimp_swigPINVOKE.Exporter_GetErrorString(swigCPtr);
    return ret;
  }

  public aiExportDataBlob GetBlob() {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Exporter_GetBlob(swigCPtr);
    aiExportDataBlob ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiExportDataBlob(cPtr, false);
    return ret;
  }

  public aiExportDataBlob GetOrphanedBlob() {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Exporter_GetOrphanedBlob(swigCPtr);
    aiExportDataBlob ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiExportDataBlob(cPtr, false);
    return ret;
  }

  public void FreeBlob() {
    assimp_swigPINVOKE.Exporter_FreeBlob(swigCPtr);
  }

  public uint GetExportFormatCount() {
    uint ret = assimp_swigPINVOKE.Exporter_GetExportFormatCount(swigCPtr);
    return ret;
  }

  public aiExportFormatDesc GetExportFormatDescription(uint pIndex) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Exporter_GetExportFormatDescription(swigCPtr, pIndex);
    aiExportFormatDesc ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiExportFormatDesc(cPtr, false);
    return ret;
  }

  public void UnregisterExporter(string id) {
    assimp_swigPINVOKE.Exporter_UnregisterExporter(swigCPtr, id);
  }

}

}
