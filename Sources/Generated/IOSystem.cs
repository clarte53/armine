//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class IOSystem : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IOSystem(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IOSystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IOSystem() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_IOSystem(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool Exists(string pFile) {
    bool ret = assimp_swigPINVOKE.IOSystem_Exists(swigCPtr, pFile);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual char getOsSeparator() {
    char ret = assimp_swigPINVOKE.IOSystem_getOsSeparator(swigCPtr);
    return ret;
  }

  public virtual IOStream Open(string pFile, string pMode) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.IOSystem_Open__SWIG_0(swigCPtr, pFile, pMode);
    IOStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new IOStream(cPtr, false);
    return ret;
  }

  public virtual IOStream Open(string pFile) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.IOSystem_Open__SWIG_1(swigCPtr, pFile);
    IOStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new IOStream(cPtr, false);
    return ret;
  }

  public virtual void Close(IOStream pFile) {
    assimp_swigPINVOKE.IOSystem_Close(swigCPtr, IOStream.getCPtr(pFile));
  }

  public virtual bool ComparePaths(string one, string second) {
    bool ret = assimp_swigPINVOKE.IOSystem_ComparePaths(swigCPtr, one, second);
    return ret;
  }

  public virtual bool PushDirectory(string path) {
    bool ret = assimp_swigPINVOKE.IOSystem_PushDirectory(swigCPtr, path);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string CurrentDirectory() {
    string ret = assimp_swigPINVOKE.IOSystem_CurrentDirectory(swigCPtr);
    return ret;
  }

  public virtual uint StackSize() {
    uint ret = assimp_swigPINVOKE.IOSystem_StackSize(swigCPtr);
    return ret;
  }

  public virtual bool PopDirectory() {
    bool ret = assimp_swigPINVOKE.IOSystem_PopDirectory(swigCPtr);
    return ret;
  }

  public virtual bool CreateDirectory(string path) {
    bool ret = assimp_swigPINVOKE.IOSystem_CreateDirectory(swigCPtr, path);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool ChangeDirectory(string path) {
    bool ret = assimp_swigPINVOKE.IOSystem_ChangeDirectory(swigCPtr, path);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DeleteFile(string file) {
    bool ret = assimp_swigPINVOKE.IOSystem_DeleteFile(swigCPtr, file);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
