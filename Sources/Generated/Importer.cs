//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class Importer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Importer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Importer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Importer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_Importer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Importer() : this(assimp_swigPINVOKE.new_Importer(), true) {
  }

  public bool SetPropertyInteger(string szName, int iValue) {
    bool ret = assimp_swigPINVOKE.Importer_SetPropertyInteger(swigCPtr, szName, iValue);
    return ret;
  }

  public bool SetPropertyBool(string szName, bool value) {
    bool ret = assimp_swigPINVOKE.Importer_SetPropertyBool(swigCPtr, szName, value);
    return ret;
  }

  public bool SetPropertyFloat(string szName, float fValue) {
    bool ret = assimp_swigPINVOKE.Importer_SetPropertyFloat(swigCPtr, szName, fValue);
    return ret;
  }

  public bool SetPropertyString(string szName, string sValue) {
    bool ret = assimp_swigPINVOKE.Importer_SetPropertyString(swigCPtr, szName, sValue);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetPropertyMatrix(string szName, aiMatrix4x4 sValue) {
    bool ret = assimp_swigPINVOKE.Importer_SetPropertyMatrix(swigCPtr, szName, aiMatrix4x4.getCPtr(sValue));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetPropertyInteger(string szName, int iErrorReturn) {
    int ret = assimp_swigPINVOKE.Importer_GetPropertyInteger__SWIG_0(swigCPtr, szName, iErrorReturn);
    return ret;
  }

  public int GetPropertyInteger(string szName) {
    int ret = assimp_swigPINVOKE.Importer_GetPropertyInteger__SWIG_1(swigCPtr, szName);
    return ret;
  }

  public bool GetPropertyBool(string szName, bool bErrorReturn) {
    bool ret = assimp_swigPINVOKE.Importer_GetPropertyBool__SWIG_0(swigCPtr, szName, bErrorReturn);
    return ret;
  }

  public bool GetPropertyBool(string szName) {
    bool ret = assimp_swigPINVOKE.Importer_GetPropertyBool__SWIG_1(swigCPtr, szName);
    return ret;
  }

  public float GetPropertyFloat(string szName, float fErrorReturn) {
    float ret = assimp_swigPINVOKE.Importer_GetPropertyFloat__SWIG_0(swigCPtr, szName, fErrorReturn);
    return ret;
  }

  public float GetPropertyFloat(string szName) {
    float ret = assimp_swigPINVOKE.Importer_GetPropertyFloat__SWIG_1(swigCPtr, szName);
    return ret;
  }

  public string GetPropertyString(string szName, string sErrorReturn) {
    string ret = assimp_swigPINVOKE.Importer_GetPropertyString__SWIG_0(swigCPtr, szName, sErrorReturn);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetPropertyString(string szName) {
    string ret = assimp_swigPINVOKE.Importer_GetPropertyString__SWIG_1(swigCPtr, szName);
    return ret;
  }

  public aiMatrix4x4 GetPropertyMatrix(string szName, aiMatrix4x4 sErrorReturn) {
    aiMatrix4x4 ret = new aiMatrix4x4(assimp_swigPINVOKE.Importer_GetPropertyMatrix__SWIG_0(swigCPtr, szName, aiMatrix4x4.getCPtr(sErrorReturn)), true);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public aiMatrix4x4 GetPropertyMatrix(string szName) {
    aiMatrix4x4 ret = new aiMatrix4x4(assimp_swigPINVOKE.Importer_GetPropertyMatrix__SWIG_1(swigCPtr, szName), true);
    return ret;
  }

  public void SetIOHandler(IOSystem pIOHandler) {
    assimp_swigPINVOKE.Importer_SetIOHandler(swigCPtr, IOSystem.getCPtr(pIOHandler));
  }

  public IOSystem GetIOHandler() {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Importer_GetIOHandler(swigCPtr);
    IOSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new IOSystem(cPtr, false);
    return ret;
  }

  public bool IsDefaultIOHandler() {
    bool ret = assimp_swigPINVOKE.Importer_IsDefaultIOHandler(swigCPtr);
    return ret;
  }

  public void SetProgressHandler(ProgressHandler pHandler) {
    assimp_swigPINVOKE.Importer_SetProgressHandler(swigCPtr, ProgressHandler.getCPtr(pHandler));
  }

  public ProgressHandler GetProgressHandler() {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Importer_GetProgressHandler(swigCPtr);
    ProgressHandler ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProgressHandler(cPtr, false);
    return ret;
  }

  public bool IsDefaultProgressHandler() {
    bool ret = assimp_swigPINVOKE.Importer_IsDefaultProgressHandler(swigCPtr);
    return ret;
  }

  public bool ValidateFlags(aiPostProcessSteps pFlags) {
    bool ret = assimp_swigPINVOKE.Importer_ValidateFlags(swigCPtr, (uint)pFlags);
    return ret;
  }

  public aiScene ReadFile(string pFile, aiPostProcessSteps pFlags) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Importer_ReadFile__SWIG_0(swigCPtr, pFile, (uint)pFlags);
    aiScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public aiScene ReadFileFromMemory(byte[] pBuffer, uint pLength, aiPostProcessSteps pFlags, string pHint) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Importer_ReadFileFromMemory__SWIG_0(swigCPtr, pBuffer, pLength, (uint)pFlags, pHint);
    aiScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public aiScene ReadFileFromMemory(byte[] pBuffer, uint pLength, aiPostProcessSteps pFlags) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Importer_ReadFileFromMemory__SWIG_1(swigCPtr, pBuffer, pLength, (uint)pFlags);
    aiScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public aiScene ApplyPostProcessing(aiPostProcessSteps pFlags) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Importer_ApplyPostProcessing(swigCPtr, (uint)pFlags);
    aiScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public void FreeScene() {
    assimp_swigPINVOKE.Importer_FreeScene(swigCPtr);
  }

  public string GetErrorString() {
    string ret = assimp_swigPINVOKE.Importer_GetErrorString(swigCPtr);
    return ret;
  }

  public aiScene GetScene() {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Importer_GetScene(swigCPtr);
    aiScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public aiScene GetOrphanedScene() {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Importer_GetOrphanedScene(swigCPtr);
    aiScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public bool IsExtensionSupported(string szExtension) {
    bool ret = assimp_swigPINVOKE.Importer_IsExtensionSupported(swigCPtr, szExtension);
    return ret;
  }

  public uint GetImporterCount() {
    uint ret = assimp_swigPINVOKE.Importer_GetImporterCount(swigCPtr);
    return ret;
  }

  public aiImporterDesc GetImporterInfo(uint index) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Importer_GetImporterInfo(swigCPtr, index);
    aiImporterDesc ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiImporterDesc(cPtr, false);
    return ret;
  }

  public uint GetImporterIndex(string szExtension) {
    uint ret = assimp_swigPINVOKE.Importer_GetImporterIndex(swigCPtr, szExtension);
    return ret;
  }

  public void GetMemoryRequirements(aiMemoryInfo in_) {
    assimp_swigPINVOKE.Importer_GetMemoryRequirements(swigCPtr, aiMemoryInfo.getCPtr(in_));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetExtraVerbose(bool bDo) {
    assimp_swigPINVOKE.Importer_SetExtraVerbose(swigCPtr, bDo);
  }

  public string GetExtensions() {
    string ret = assimp_swigPINVOKE.Importer_GetExtensions(swigCPtr);
    return ret;
  }

  public aiScene ReadFile(byte[] pFilename, uint pSize, aiPostProcessSteps pFlags) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.Importer_ReadFile__SWIG_1(swigCPtr, pFilename, pSize, (uint)pFlags);
    aiScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public static readonly uint MaxLenHint = assimp_swigPINVOKE.Importer_MaxLenHint_get();
}

}
