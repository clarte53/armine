//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class Logger : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Logger(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Logger obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Logger() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_Logger(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void debug(string message) {
    assimp_swigPINVOKE.Logger_debug(swigCPtr, message);
  }

  public void info(string message) {
    assimp_swigPINVOKE.Logger_info(swigCPtr, message);
  }

  public void warn(string message) {
    assimp_swigPINVOKE.Logger_warn(swigCPtr, message);
  }

  public void error(string message) {
    assimp_swigPINVOKE.Logger_error(swigCPtr, message);
  }

  public void setLogSeverity(Logger.LogSeverity log_severity) {
    assimp_swigPINVOKE.Logger_setLogSeverity(swigCPtr, (int)log_severity);
  }

  public Logger.LogSeverity getLogSeverity() {
    Logger.LogSeverity ret = (Logger.LogSeverity)assimp_swigPINVOKE.Logger_getLogSeverity(swigCPtr);
    return ret;
  }

  public virtual bool attachStream(LogStream pStream, Logger.ErrorSeverity severity) {
    bool ret = assimp_swigPINVOKE.Logger_attachStream__SWIG_0(swigCPtr, LogStream.getCPtr(pStream), (uint)severity);
    return ret;
  }

  public virtual bool attachStream(LogStream pStream) {
    bool ret = assimp_swigPINVOKE.Logger_attachStream__SWIG_1(swigCPtr, LogStream.getCPtr(pStream));
    return ret;
  }

  public virtual bool detatchStream(LogStream pStream, Logger.ErrorSeverity severity) {
    bool ret = assimp_swigPINVOKE.Logger_detatchStream__SWIG_0(swigCPtr, LogStream.getCPtr(pStream), (uint)severity);
    return ret;
  }

  public virtual bool detatchStream(LogStream pStream) {
    bool ret = assimp_swigPINVOKE.Logger_detatchStream__SWIG_1(swigCPtr, LogStream.getCPtr(pStream));
    return ret;
  }

  public enum LogSeverity {
    NORMAL,
    VERBOSE
  }

  public enum ErrorSeverity {
    Debugging = 1,
    Info = 2,
    Warn = 4,
    Err = 8
  }

}

}
