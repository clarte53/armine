//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiAnimMesh : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiAnimMesh(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiAnimMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiAnimMesh() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiAnimMesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public aiString mName {
    set {
      assimp_swigPINVOKE.aiAnimMesh_mName_set(swigCPtr, aiString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimMesh_mName_get(swigCPtr);
      aiString ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiString(cPtr, false);
      return ret;
    } 
  }

  public aiVector3D mBitangents {
    set {
      assimp_swigPINVOKE.aiAnimMesh_mBitangents_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimMesh_mBitangents_get(swigCPtr);
      aiVector3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public float mWeight {
    set {
      assimp_swigPINVOKE.aiAnimMesh_mWeight_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiAnimMesh_mWeight_get(swigCPtr);
      return ret;
    } 
  }

  public aiVector3DArray Vertices {
    set {
      assimp_swigPINVOKE.aiAnimMesh_Vertices_set(swigCPtr, aiVector3DArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimMesh_Vertices_get(swigCPtr);
      aiVector3DArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3DArray(cPtr, false);
      return ret;
    } 
  }

  public aiVector3DArray Normals {
    set {
      assimp_swigPINVOKE.aiAnimMesh_Normals_set(swigCPtr, aiVector3DArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimMesh_Normals_get(swigCPtr);
      aiVector3DArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3DArray(cPtr, false);
      return ret;
    } 
  }

  public aiVector3DArray Tangents {
    set {
      assimp_swigPINVOKE.aiAnimMesh_Tangents_set(swigCPtr, aiVector3DArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimMesh_Tangents_get(swigCPtr);
      aiVector3DArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3DArray(cPtr, false);
      return ret;
    } 
  }

  public aiVector3DArray Bitangents {
    set {
      assimp_swigPINVOKE.aiAnimMesh_Bitangents_set(swigCPtr, aiVector3DArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimMesh_Bitangents_get(swigCPtr);
      aiVector3DArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3DArray(cPtr, false);
      return ret;
    } 
  }

  public aiColor4DMultiArray Colors {
    set {
      assimp_swigPINVOKE.aiAnimMesh_Colors_set(swigCPtr, aiColor4DMultiArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimMesh_Colors_get(swigCPtr);
      aiColor4DMultiArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiColor4DMultiArray(cPtr, false);
      return ret;
    } 
  }

  public aiVector3DMultiArray TextureCoords {
    set {
      assimp_swigPINVOKE.aiAnimMesh_TextureCoords_set(swigCPtr, aiVector3DMultiArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimMesh_TextureCoords_get(swigCPtr);
      aiVector3DMultiArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3DMultiArray(cPtr, false);
      return ret;
    } 
  }

  public aiAnimMesh() : this(assimp_swigPINVOKE.new_aiAnimMesh(), true) {
  }

  public bool HasPositions() {
    bool ret = assimp_swigPINVOKE.aiAnimMesh_HasPositions(swigCPtr);
    return ret;
  }

  public bool HasNormals() {
    bool ret = assimp_swigPINVOKE.aiAnimMesh_HasNormals(swigCPtr);
    return ret;
  }

  public bool HasTangentsAndBitangents() {
    bool ret = assimp_swigPINVOKE.aiAnimMesh_HasTangentsAndBitangents(swigCPtr);
    return ret;
  }

  public bool HasVertexColors(uint pIndex) {
    bool ret = assimp_swigPINVOKE.aiAnimMesh_HasVertexColors(swigCPtr, pIndex);
    return ret;
  }

  public bool HasTextureCoords(uint pIndex) {
    bool ret = assimp_swigPINVOKE.aiAnimMesh_HasTextureCoords(swigCPtr, pIndex);
    return ret;
  }

}

}
