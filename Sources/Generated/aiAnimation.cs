//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiAnimation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiAnimation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiAnimation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiAnimation() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiAnimation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public aiString mName {
    set {
      assimp_swigPINVOKE.aiAnimation_mName_set(swigCPtr, aiString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimation_mName_get(swigCPtr);
      aiString ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiString(cPtr, false);
      return ret;
    } 
  }

  public double mDuration {
    set {
      assimp_swigPINVOKE.aiAnimation_mDuration_set(swigCPtr, value);
    } 
    get {
      double ret = assimp_swigPINVOKE.aiAnimation_mDuration_get(swigCPtr);
      return ret;
    } 
  }

  public double mTicksPerSecond {
    set {
      assimp_swigPINVOKE.aiAnimation_mTicksPerSecond_set(swigCPtr, value);
    } 
    get {
      double ret = assimp_swigPINVOKE.aiAnimation_mTicksPerSecond_get(swigCPtr);
      return ret;
    } 
  }

  public uint mNumMorphMeshChannels {
    set {
      assimp_swigPINVOKE.aiAnimation_mNumMorphMeshChannels_set(swigCPtr, value);
    } 
    get {
      uint ret = assimp_swigPINVOKE.aiAnimation_mNumMorphMeshChannels_get(swigCPtr);
      return ret;
    } 
  }

  public aiNodeAnimArray Channels {
    set {
      assimp_swigPINVOKE.aiAnimation_Channels_set(swigCPtr, aiNodeAnimArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimation_Channels_get(swigCPtr);
      aiNodeAnimArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiNodeAnimArray(cPtr, false);
      return ret;
    } 
  }

  public aiMeshAnimArray MeshChannels {
    set {
      assimp_swigPINVOKE.aiAnimation_MeshChannels_set(swigCPtr, aiMeshAnimArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimation_MeshChannels_get(swigCPtr);
      aiMeshAnimArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiMeshAnimArray(cPtr, false);
      return ret;
    } 
  }

  public aiMeshMorphAnimArray MorphMeshChannels {
    set {
      assimp_swigPINVOKE.aiAnimation_MorphMeshChannels_set(swigCPtr, aiMeshMorphAnimArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiAnimation_MorphMeshChannels_get(swigCPtr);
      aiMeshMorphAnimArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiMeshMorphAnimArray(cPtr, false);
      return ret;
    } 
  }

  public aiAnimation() : this(assimp_swigPINVOKE.new_aiAnimation(), true) {
  }

}

}
