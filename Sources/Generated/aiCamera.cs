//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiCamera : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiCamera(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiCamera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiCamera() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiCamera(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public aiString mName {
    set {
      assimp_swigPINVOKE.aiCamera_mName_set(swigCPtr, aiString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiCamera_mName_get(swigCPtr);
      aiString ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiString(cPtr, false);
      return ret;
    } 
  }

  public aiVector3D mPosition {
    set {
      assimp_swigPINVOKE.aiCamera_mPosition_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiCamera_mPosition_get(swigCPtr);
      aiVector3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public aiVector3D mUp {
    set {
      assimp_swigPINVOKE.aiCamera_mUp_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiCamera_mUp_get(swigCPtr);
      aiVector3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public aiVector3D mLookAt {
    set {
      assimp_swigPINVOKE.aiCamera_mLookAt_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiCamera_mLookAt_get(swigCPtr);
      aiVector3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public float mHorizontalFOV {
    set {
      assimp_swigPINVOKE.aiCamera_mHorizontalFOV_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiCamera_mHorizontalFOV_get(swigCPtr);
      return ret;
    } 
  }

  public float mClipPlaneNear {
    set {
      assimp_swigPINVOKE.aiCamera_mClipPlaneNear_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiCamera_mClipPlaneNear_get(swigCPtr);
      return ret;
    } 
  }

  public float mClipPlaneFar {
    set {
      assimp_swigPINVOKE.aiCamera_mClipPlaneFar_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiCamera_mClipPlaneFar_get(swigCPtr);
      return ret;
    } 
  }

  public float mAspect {
    set {
      assimp_swigPINVOKE.aiCamera_mAspect_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiCamera_mAspect_get(swigCPtr);
      return ret;
    } 
  }

  public aiCamera() : this(assimp_swigPINVOKE.new_aiCamera(), true) {
  }

  public void GetCameraMatrix(aiMatrix4x4 out_) {
    assimp_swigPINVOKE.aiCamera_GetCameraMatrix(swigCPtr, aiMatrix4x4.getCPtr(out_));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
