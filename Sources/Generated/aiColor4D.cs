//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiColor4D : global::System.IDisposable, Interface.Unmanagable<aiColor4D> {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiColor4D(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiColor4D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiColor4D() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiColor4D(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public aiColor4D Unmanaged() {
    this.swigCMemOwn = false;
    return this;
  }

  public aiColor4D() : this(assimp_swigPINVOKE.new_aiColor4D__SWIG_0(), true) {
  }

  public aiColor4D(float _r, float _g, float _b, float _a) : this(assimp_swigPINVOKE.new_aiColor4D__SWIG_1(_r, _g, _b, _a), true) {
  }

  public aiColor4D(float _r) : this(assimp_swigPINVOKE.new_aiColor4D__SWIG_2(_r), true) {
  }

  public aiColor4D(aiColor4D o) : this(assimp_swigPINVOKE.new_aiColor4D__SWIG_3(aiColor4D.getCPtr(o)), true) {
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public aiColor4D op_add_and_set(aiColor4D o) {
    aiColor4D ret = new aiColor4D(assimp_swigPINVOKE.aiColor4D_op_add_and_set(swigCPtr, aiColor4D.getCPtr(o)), false);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public aiColor4D op_sub_and_set(aiColor4D o) {
    aiColor4D ret = new aiColor4D(assimp_swigPINVOKE.aiColor4D_op_sub_and_set(swigCPtr, aiColor4D.getCPtr(o)), false);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public aiColor4D op_mul_and_set(float f) {
    aiColor4D ret = new aiColor4D(assimp_swigPINVOKE.aiColor4D_op_mul_and_set(swigCPtr, f), false);
    return ret;
  }

  public aiColor4D op_div_and_set(float f) {
    aiColor4D ret = new aiColor4D(assimp_swigPINVOKE.aiColor4D_op_div_and_set(swigCPtr, f), false);
    return ret;
  }

  public bool op_equal(aiColor4D other) {
    bool ret = assimp_swigPINVOKE.aiColor4D_op_equal(swigCPtr, aiColor4D.getCPtr(other));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool op_not_equal(aiColor4D other) {
    bool ret = assimp_swigPINVOKE.aiColor4D_op_not_equal(swigCPtr, aiColor4D.getCPtr(other));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool op_lesser(aiColor4D other) {
    bool ret = assimp_swigPINVOKE.aiColor4D_op_lesser(swigCPtr, aiColor4D.getCPtr(other));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float op_get(uint i) {
    float ret = assimp_swigPINVOKE.aiColor4D_op_get(swigCPtr, i);
    return ret;
  }

  public bool IsBlack() {
    bool ret = assimp_swigPINVOKE.aiColor4D_IsBlack(swigCPtr);
    return ret;
  }

  public float r {
    set {
      assimp_swigPINVOKE.aiColor4D_r_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiColor4D_r_get(swigCPtr);
      return ret;
    } 
  }

  public float g {
    set {
      assimp_swigPINVOKE.aiColor4D_g_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiColor4D_g_get(swigCPtr);
      return ret;
    } 
  }

  public float b {
    set {
      assimp_swigPINVOKE.aiColor4D_b_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiColor4D_b_get(swigCPtr);
      return ret;
    } 
  }

  public float a {
    set {
      assimp_swigPINVOKE.aiColor4D_a_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiColor4D_a_get(swigCPtr);
      return ret;
    } 
  }

}

}
