//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiMaterial : global::System.IDisposable, Interface.Unmanagable<aiMaterial> {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiMaterial(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiMaterial obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiMaterial() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiMaterial(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public aiMaterial Unmanaged() {
    this.swigCMemOwn = false;
    return this;
  }

  public aiMaterial() : this(assimp_swigPINVOKE.new_aiMaterial(), true) {
  }

  public aiString GetName() {
    aiString ret = new aiString(assimp_swigPINVOKE.aiMaterial_GetName__SWIG_0(swigCPtr), true);
    return ret;
  }

  public uint GetTextureCount(aiTextureType type) {
    uint ret = assimp_swigPINVOKE.aiMaterial_GetTextureCount(swigCPtr, (int)type);
    return ret;
  }

  public void Clear() {
    assimp_swigPINVOKE.aiMaterial_Clear(swigCPtr);
  }

  public static void CopyPropertyList(aiMaterial pcDest, aiMaterial pcSrc) {
    assimp_swigPINVOKE.aiMaterial_CopyPropertyList(aiMaterial.getCPtr(pcDest), aiMaterial.getCPtr(pcSrc));
  }

  public bool GetName(aiString OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetName__SWIG_1(swigCPtr, aiString.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetName(aiString INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetName(swigCPtr, aiString.getCPtr(INPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetColorDiffuse(aiColor4D OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetColorDiffuse(swigCPtr, aiColor4D.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetColorDiffuse(aiColor4D INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetColorDiffuse(swigCPtr, aiColor4D.getCPtr(INPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetColorSpecular(aiColor4D OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetColorSpecular(swigCPtr, aiColor4D.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetColorSpecular(aiColor4D INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetColorSpecular(swigCPtr, aiColor4D.getCPtr(INPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetColorAmbient(aiColor4D OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetColorAmbient(swigCPtr, aiColor4D.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetColorAmbient(aiColor4D INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetColorAmbient(swigCPtr, aiColor4D.getCPtr(INPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetColorEmissive(aiColor4D OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetColorEmissive(swigCPtr, aiColor4D.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetColorEmissive(aiColor4D INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetColorEmissive(swigCPtr, aiColor4D.getCPtr(INPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetColorTransparent(aiColor4D OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetColorTransparent(swigCPtr, aiColor4D.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetColorTransparent(aiColor4D INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetColorTransparent(swigCPtr, aiColor4D.getCPtr(INPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetColorReflective(aiColor4D OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetColorReflective(swigCPtr, aiColor4D.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetColorReflective(aiColor4D INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetColorReflective(swigCPtr, aiColor4D.getCPtr(INPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetOpacity(out float OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetOpacity(swigCPtr, out OUTPUT);
    return ret;
  }

  public bool SetOpacity(float INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetOpacity(swigCPtr, INPUT);
    return ret;
  }

  public bool GetShininess(out float OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetShininess(swigCPtr, out OUTPUT);
    return ret;
  }

  public bool SetShininess(float INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetShininess(swigCPtr, INPUT);
    return ret;
  }

  public bool GetShininessStrength(out float OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetShininessStrength(swigCPtr, out OUTPUT);
    return ret;
  }

  public bool SetShininessStrength(float INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetShininessStrength(swigCPtr, INPUT);
    return ret;
  }

  public bool GetRefraction(out float OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetRefraction(swigCPtr, out OUTPUT);
    return ret;
  }

  public bool SetRefraction(float INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetRefraction(swigCPtr, INPUT);
    return ret;
  }

  public bool GetReflectivity(out float OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetReflectivity(swigCPtr, out OUTPUT);
    return ret;
  }

  public bool SetReflectivity(float INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetReflectivity(swigCPtr, INPUT);
    return ret;
  }

  public bool GetTwoSided(out int OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetTwoSided(swigCPtr, out OUTPUT);
    return ret;
  }

  public bool SetTwoSided(int INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetTwoSided(swigCPtr, INPUT);
    return ret;
  }

  public bool GetEnableWireframe(out int OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetEnableWireframe(swigCPtr, out OUTPUT);
    return ret;
  }

  public bool SetEnableWireframe(int INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetEnableWireframe(swigCPtr, INPUT);
    return ret;
  }

  public bool GetBumpScaling(out int OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetBumpScaling(swigCPtr, out OUTPUT);
    return ret;
  }

  public bool SetBumpScaling(int INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetBumpScaling(swigCPtr, INPUT);
    return ret;
  }

  public bool GetBlendFunction(out aiBlendMode OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetBlendFunction(swigCPtr, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetBlendFunction(aiBlendMode INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetBlendFunction(swigCPtr, INPUT);
    return ret;
  }

  public bool GetShadingModel(out aiShadingMode OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetShadingModel(swigCPtr, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetShadingModel(aiShadingMode INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetShadingModel(swigCPtr, INPUT);
    return ret;
  }

  public bool GetGlobalBackgroundImage(aiString OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetGlobalBackgroundImage(swigCPtr, aiString.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetGlobalBackgroundImage(aiString INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetGlobalBackgroundImage(swigCPtr, aiString.getCPtr(INPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetTexturePath(aiTextureType type, uint index, aiString OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetTexturePath(swigCPtr, (int)type, index, aiString.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetTexturePath(aiTextureType type, uint index, aiString INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetTexturePath(swigCPtr, (int)type, index, aiString.getCPtr(INPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetUVWSource(aiTextureType type, uint index, out int OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetUVWSource(swigCPtr, (int)type, index, out OUTPUT);
    return ret;
  }

  public bool SetUVWSource(aiTextureType type, uint index, int INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetUVWSource(swigCPtr, (int)type, index, INPUT);
    return ret;
  }

  public bool GetMapping(aiTextureType type, uint index, out aiTextureMapping OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetMapping(swigCPtr, (int)type, index, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetMapping(aiTextureType type, uint index, aiTextureMapping INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetMapping(swigCPtr, (int)type, index, INPUT);
    return ret;
  }

  public bool GetTextureFlags(aiTextureType type, uint index, out aiTextureFlags OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetTextureFlags(swigCPtr, (int)type, index, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetTextureFlags(aiTextureType type, uint index, aiTextureFlags INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetTextureFlags(swigCPtr, (int)type, index, INPUT);
    return ret;
  }

  public bool GetMappingModeU(aiTextureType type, uint index, out aiTextureMapMode OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetMappingModeU(swigCPtr, (int)type, index, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetMappingModeU(aiTextureType type, uint index, aiTextureMapMode INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetMappingModeU(swigCPtr, (int)type, index, INPUT);
    return ret;
  }

  public bool GetMappingModeV(aiTextureType type, uint index, out aiTextureMapMode OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetMappingModeV(swigCPtr, (int)type, index, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetMappingModeV(aiTextureType type, uint index, aiTextureMapMode INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetMappingModeV(swigCPtr, (int)type, index, INPUT);
    return ret;
  }

  public bool GetTextureOperation(aiTextureType type, uint index, out aiTextureOp OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetTextureOperation(swigCPtr, (int)type, index, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetTextureOperation(aiTextureType type, uint index, aiTextureOp INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetTextureOperation(swigCPtr, (int)type, index, INPUT);
    return ret;
  }

  public bool GetTextureMappingAxis(aiTextureType type, uint index, aiVector3D OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetTextureMappingAxis(swigCPtr, (int)type, index, aiVector3D.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetTextureMappingAxis(aiTextureType type, uint index, aiVector3D INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetTextureMappingAxis(swigCPtr, (int)type, index, aiVector3D.getCPtr(INPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetTextureBlend(aiTextureType type, uint index, out float OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetTextureBlend(swigCPtr, (int)type, index, out OUTPUT);
    return ret;
  }

  public bool SetTextureBlend(aiTextureType type, uint index, float INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetTextureBlend(swigCPtr, (int)type, index, INPUT);
    return ret;
  }

  public bool GetUVTransform(aiTextureType type, uint index, aiUVTransform OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_GetUVTransform(swigCPtr, (int)type, index, aiUVTransform.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetUVTransform(aiTextureType type, uint index, aiUVTransform INPUT) {
    bool ret = assimp_swigPINVOKE.aiMaterial_SetUVTransform(swigCPtr, (int)type, index, aiUVTransform.getCPtr(INPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
