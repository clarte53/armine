//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiMesh : global::System.IDisposable, Interface.Unmanagable<aiMesh> {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiMesh(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiMesh() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiMesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public aiMesh Unmanaged() {
    this.swigCMemOwn = false;
    return this;
  }

  public aiPrimitiveType mPrimitiveTypes {
    set {
      assimp_swigPINVOKE.aiMesh_mPrimitiveTypes_set(swigCPtr, (uint)value);
    }  get { return (aiPrimitiveType)assimp_swigPINVOKE.aiMesh_mPrimitiveTypes_get(swigCPtr); } 
  }

  public uint mMaterialIndex {
    set {
      assimp_swigPINVOKE.aiMesh_mMaterialIndex_set(swigCPtr, value);
    } 
    get {
      uint ret = assimp_swigPINVOKE.aiMesh_mMaterialIndex_get(swigCPtr);
      return ret;
    } 
  }

  public aiString mName {
    set {
      assimp_swigPINVOKE.aiMesh_mName_set(swigCPtr, aiString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_mName_get(swigCPtr);
      aiString ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiString(cPtr, false);
      return ret;
    } 
  }

  public uint mMethod {
    set {
      assimp_swigPINVOKE.aiMesh_mMethod_set(swigCPtr, value);
    } 
    get {
      uint ret = assimp_swigPINVOKE.aiMesh_mMethod_get(swigCPtr);
      return ret;
    } 
  }

  public aiAABB mAABB {
    set {
      assimp_swigPINVOKE.aiMesh_mAABB_set(swigCPtr, aiAABB.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_mAABB_get(swigCPtr);
      aiAABB ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiAABB(cPtr, false);
      return ret;
    } 
  }

  public aiVector3DArray Vertices {
    set {
      assimp_swigPINVOKE.aiMesh_Vertices_set(swigCPtr, aiVector3DArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_Vertices_get(swigCPtr);
      aiVector3DArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3DArray(cPtr, false);
      return ret;
    } 
  }

  public aiVector3DArray Normals {
    set {
      assimp_swigPINVOKE.aiMesh_Normals_set(swigCPtr, aiVector3DArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_Normals_get(swigCPtr);
      aiVector3DArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3DArray(cPtr, false);
      return ret;
    } 
  }

  public aiVector3DArray Tangents {
    set {
      assimp_swigPINVOKE.aiMesh_Tangents_set(swigCPtr, aiVector3DArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_Tangents_get(swigCPtr);
      aiVector3DArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3DArray(cPtr, false);
      return ret;
    } 
  }

  public aiVector3DArray Bitangents {
    set {
      assimp_swigPINVOKE.aiMesh_Bitangents_set(swigCPtr, aiVector3DArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_Bitangents_get(swigCPtr);
      aiVector3DArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3DArray(cPtr, false);
      return ret;
    } 
  }

  public aiColor4DMultiArray Colors {
    set {
      assimp_swigPINVOKE.aiMesh_Colors_set(swigCPtr, aiColor4DMultiArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_Colors_get(swigCPtr);
      aiColor4DMultiArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiColor4DMultiArray(cPtr, false);
      return ret;
    } 
  }

  public aiVector3DMultiArray TextureCoords {
    set {
      assimp_swigPINVOKE.aiMesh_TextureCoords_set(swigCPtr, aiVector3DMultiArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_TextureCoords_get(swigCPtr);
      aiVector3DMultiArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3DMultiArray(cPtr, false);
      return ret;
    } 
  }

  public aiUIntFixedArray NumUVComponents {
    set {
      assimp_swigPINVOKE.aiMesh_NumUVComponents_set(swigCPtr, aiUIntFixedArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_NumUVComponents_get(swigCPtr);
      aiUIntFixedArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiUIntFixedArray(cPtr, false);
      return ret;
    } 
  }

  public aiFaceArray Faces {
    set {
      assimp_swigPINVOKE.aiMesh_Faces_set(swigCPtr, aiFaceArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_Faces_get(swigCPtr);
      aiFaceArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiFaceArray(cPtr, false);
      return ret;
    } 
  }

  public aiBoneArray Bones {
    set {
      assimp_swigPINVOKE.aiMesh_Bones_set(swigCPtr, aiBoneArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_Bones_get(swigCPtr);
      aiBoneArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiBoneArray(cPtr, false);
      return ret;
    } 
  }

  public aiAnimMeshArray AnimMeshes {
    set {
      assimp_swigPINVOKE.aiMesh_AnimMeshes_set(swigCPtr, aiAnimMeshArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMesh_AnimMeshes_get(swigCPtr);
      aiAnimMeshArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiAnimMeshArray(cPtr, false);
      return ret;
    } 
  }

  public aiMesh() : this(assimp_swigPINVOKE.new_aiMesh(), true) {
  }

  public bool HasPositions() {
    bool ret = assimp_swigPINVOKE.aiMesh_HasPositions(swigCPtr);
    return ret;
  }

  public bool HasFaces() {
    bool ret = assimp_swigPINVOKE.aiMesh_HasFaces(swigCPtr);
    return ret;
  }

  public bool HasNormals() {
    bool ret = assimp_swigPINVOKE.aiMesh_HasNormals(swigCPtr);
    return ret;
  }

  public bool HasTangentsAndBitangents() {
    bool ret = assimp_swigPINVOKE.aiMesh_HasTangentsAndBitangents(swigCPtr);
    return ret;
  }

  public bool HasVertexColors(uint pIndex) {
    bool ret = assimp_swigPINVOKE.aiMesh_HasVertexColors(swigCPtr, pIndex);
    return ret;
  }

  public bool HasTextureCoords(uint pIndex) {
    bool ret = assimp_swigPINVOKE.aiMesh_HasTextureCoords(swigCPtr, pIndex);
    return ret;
  }

  public uint GetNumUVChannels() {
    uint ret = assimp_swigPINVOKE.aiMesh_GetNumUVChannels(swigCPtr);
    return ret;
  }

  public uint GetNumColorChannels() {
    uint ret = assimp_swigPINVOKE.aiMesh_GetNumColorChannels(swigCPtr);
    return ret;
  }

  public bool HasBones() {
    bool ret = assimp_swigPINVOKE.aiMesh_HasBones(swigCPtr);
    return ret;
  }

}

}
