//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiMetadata : global::System.IDisposable, Interface.Unmanagable<aiMetadata> {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiMetadata(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiMetadata obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiMetadata() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiMetadata(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public aiMetadata Unmanaged() {
    this.swigCMemOwn = false;
    return this;
  }

  public aiStringArray Keys {
    set {
      assimp_swigPINVOKE.aiMetadata_Keys_set(swigCPtr, aiStringArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMetadata_Keys_get(swigCPtr);
      aiStringArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiStringArray(cPtr, false);
      return ret;
    } 
  }

  public aiMetadataEntryArray Values {
    set {
      assimp_swigPINVOKE.aiMetadata_Values_set(swigCPtr, aiMetadataEntryArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMetadata_Values_get(swigCPtr);
      aiMetadataEntryArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiMetadataEntryArray(cPtr, false);
      return ret;
    } 
  }

  public aiMetadata() : this(assimp_swigPINVOKE.new_aiMetadata__SWIG_0(), true) {
  }

  public aiMetadata(aiMetadata rhs) : this(assimp_swigPINVOKE.new_aiMetadata__SWIG_1(aiMetadata.getCPtr(rhs)), true) {
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public static aiMetadata Alloc(uint numProperties) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.aiMetadata_Alloc(numProperties);
    aiMetadata ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiMetadata(cPtr, false);
    return ret;
  }

  public static void Dealloc(aiMetadata metadata) {
    assimp_swigPINVOKE.aiMetadata_Dealloc(aiMetadata.getCPtr(metadata));
  }

  public void AddBool(string key, bool value) {
    assimp_swigPINVOKE.aiMetadata_AddBool(swigCPtr, key, value);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBool(uint index, string key, bool value) {
    assimp_swigPINVOKE.aiMetadata_SetBool(swigCPtr, index, key, value);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetBool(uint index, out bool OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetBool__SWIG_0(swigCPtr, index, out OUTPUT);
    return ret;
  }

  public bool GetBool(string key, out bool OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetBool__SWIG_1(swigCPtr, key, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddInt32(string key, int value) {
    assimp_swigPINVOKE.aiMetadata_AddInt32(swigCPtr, key, value);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInt32(uint index, string key, int value) {
    assimp_swigPINVOKE.aiMetadata_SetInt32(swigCPtr, index, key, value);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetInt32(uint index, out int OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetInt32__SWIG_0(swigCPtr, index, out OUTPUT);
    return ret;
  }

  public bool GetInt32(string key, out int OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetInt32__SWIG_1(swigCPtr, key, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddUInt64(string key, ulong value) {
    assimp_swigPINVOKE.aiMetadata_AddUInt64(swigCPtr, key, value);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUInt64(uint index, string key, ulong value) {
    assimp_swigPINVOKE.aiMetadata_SetUInt64(swigCPtr, index, key, value);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetUInt64(uint index, out ulong OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetUInt64__SWIG_0(swigCPtr, index, out OUTPUT);
    return ret;
  }

  public bool GetUInt64(string key, out ulong OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetUInt64__SWIG_1(swigCPtr, key, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddFloat(string key, float value) {
    assimp_swigPINVOKE.aiMetadata_AddFloat(swigCPtr, key, value);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFloat(uint index, string key, float value) {
    assimp_swigPINVOKE.aiMetadata_SetFloat(swigCPtr, index, key, value);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetFloat(uint index, out float OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetFloat__SWIG_0(swigCPtr, index, out OUTPUT);
    return ret;
  }

  public bool GetFloat(string key, out float OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetFloat__SWIG_1(swigCPtr, key, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddDouble(string key, double value) {
    assimp_swigPINVOKE.aiMetadata_AddDouble(swigCPtr, key, value);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDouble(uint index, string key, double value) {
    assimp_swigPINVOKE.aiMetadata_SetDouble(swigCPtr, index, key, value);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetDouble(uint index, out double OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetDouble__SWIG_0(swigCPtr, index, out OUTPUT);
    return ret;
  }

  public bool GetDouble(string key, out double OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetDouble__SWIG_1(swigCPtr, key, out OUTPUT);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddString(string key, aiString value) {
    assimp_swigPINVOKE.aiMetadata_AddString(swigCPtr, key, aiString.getCPtr(value));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetString(uint index, string key, aiString value) {
    assimp_swigPINVOKE.aiMetadata_SetString(swigCPtr, index, key, aiString.getCPtr(value));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetString(uint index, aiString OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetString__SWIG_0(swigCPtr, index, aiString.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetString(string key, aiString OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetString__SWIG_1(swigCPtr, key, aiString.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddVector3D(string key, aiVector3D value) {
    assimp_swigPINVOKE.aiMetadata_AddVector3D(swigCPtr, key, aiVector3D.getCPtr(value));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVector3D(uint index, string key, aiVector3D value) {
    assimp_swigPINVOKE.aiMetadata_SetVector3D(swigCPtr, index, key, aiVector3D.getCPtr(value));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetVector3D(uint index, aiVector3D OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetVector3D__SWIG_0(swigCPtr, index, aiVector3D.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetVector3D(string key, aiVector3D OUTPUT) {
    bool ret = assimp_swigPINVOKE.aiMetadata_GetVector3D__SWIG_1(swigCPtr, key, aiVector3D.getCPtr(OUTPUT));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
