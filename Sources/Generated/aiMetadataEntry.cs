//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiMetadataEntry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiMetadataEntry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiMetadataEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiMetadataEntry() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiMetadataEntry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public aiMetadataType mType {
    set {
      assimp_swigPINVOKE.aiMetadataEntry_mType_set(swigCPtr, (int)value);
    } 
    get {
      aiMetadataType ret = (aiMetadataType)assimp_swigPINVOKE.aiMetadataEntry_mType_get(swigCPtr);
      return ret;
    } 
  }

  public bool GetBool() {
    bool ret = assimp_swigPINVOKE.aiMetadataEntry_GetBool(swigCPtr);
    return ret;
  }

  public void SetBool(bool value) {
    assimp_swigPINVOKE.aiMetadataEntry_SetBool(swigCPtr, value);
  }

  public int GetInt32() {
    int ret = assimp_swigPINVOKE.aiMetadataEntry_GetInt32(swigCPtr);
    return ret;
  }

  public void SetInt32(int value) {
    assimp_swigPINVOKE.aiMetadataEntry_SetInt32(swigCPtr, value);
  }

  public ulong GetUInt64() {
    ulong ret = assimp_swigPINVOKE.aiMetadataEntry_GetUInt64(swigCPtr);
    return ret;
  }

  public void SetUInt64(ulong value) {
    assimp_swigPINVOKE.aiMetadataEntry_SetUInt64(swigCPtr, value);
  }

  public float GetFloat() {
    float ret = assimp_swigPINVOKE.aiMetadataEntry_GetFloat(swigCPtr);
    return ret;
  }

  public void SetFloat(float value) {
    assimp_swigPINVOKE.aiMetadataEntry_SetFloat(swigCPtr, value);
  }

  public double GetDouble() {
    double ret = assimp_swigPINVOKE.aiMetadataEntry_GetDouble(swigCPtr);
    return ret;
  }

  public void SetDouble(double value) {
    assimp_swigPINVOKE.aiMetadataEntry_SetDouble(swigCPtr, value);
  }

  public aiString GetString() {
    aiString ret = new aiString(assimp_swigPINVOKE.aiMetadataEntry_GetString(swigCPtr), true);
    return ret;
  }

  public void SetString(aiString value) {
    assimp_swigPINVOKE.aiMetadataEntry_SetString(swigCPtr, aiString.getCPtr(value));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public aiVector3D GetVector3D() {
    aiVector3D ret = new aiVector3D(assimp_swigPINVOKE.aiMetadataEntry_GetVector3D(swigCPtr), true);
    return ret;
  }

  public void SetVector3D(aiVector3D value) {
    assimp_swigPINVOKE.aiMetadataEntry_SetVector3D(swigCPtr, aiVector3D.getCPtr(value));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public aiMetadataEntry() : this(assimp_swigPINVOKE.new_aiMetadataEntry(), true) {
  }

}

}
