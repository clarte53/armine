//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiNode : global::System.IDisposable, Interface.Unmanagable<aiNode> {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiNode(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiNode() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiNode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public aiNode Unmanaged() {
    this.swigCMemOwn = false;
    return this;
  }

  public aiString mName {
    set {
      assimp_swigPINVOKE.aiNode_mName_set(swigCPtr, aiString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNode_mName_get(swigCPtr);
      aiString ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiString(cPtr, false);
      return ret;
    } 
  }

  public aiMatrix4x4 mTransformation {
    set {
      assimp_swigPINVOKE.aiNode_mTransformation_set(swigCPtr, aiMatrix4x4.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNode_mTransformation_get(swigCPtr);
      aiMatrix4x4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiMatrix4x4(cPtr, false);
      return ret;
    } 
  }

  public aiNode mParent {
    set {
      assimp_swigPINVOKE.aiNode_mParent_set(swigCPtr, aiNode.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNode_mParent_get(swigCPtr);
      aiNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiNode(cPtr, false);
      return ret;
    } 
  }

  public aiMetadata mMetaData {
    set {
      assimp_swigPINVOKE.aiNode_mMetaData_set(swigCPtr, aiMetadata.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNode_mMetaData_get(swigCPtr);
      aiMetadata ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiMetadata(cPtr, false);
      return ret;
    } 
  }

  public aiNodeArray Children {
    set {
      assimp_swigPINVOKE.aiNode_Children_set(swigCPtr, aiNodeArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNode_Children_get(swigCPtr);
      aiNodeArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiNodeArray(cPtr, false);
      return ret;
    } 
  }

  public aiUIntArray Meshes {
    set {
      assimp_swigPINVOKE.aiNode_Meshes_set(swigCPtr, aiUIntArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNode_Meshes_get(swigCPtr);
      aiUIntArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiUIntArray(cPtr, false);
      return ret;
    } 
  }

  public aiNode() : this(assimp_swigPINVOKE.new_aiNode__SWIG_0(), true) {
  }

  public aiNode(string name) : this(assimp_swigPINVOKE.new_aiNode__SWIG_1(name), true) {
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public aiNode FindNode(aiString name) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNode_FindNode__SWIG_0(swigCPtr, aiString.getCPtr(name));
    aiNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiNode(cPtr, false);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public aiNode FindNode(string name) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNode_FindNode__SWIG_1(swigCPtr, name);
    aiNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiNode(cPtr, false);
    return ret;
  }

}

}
