//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiNodeAnim : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiNodeAnim(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiNodeAnim obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiNodeAnim() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiNodeAnim(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public aiString mNodeName {
    set {
      assimp_swigPINVOKE.aiNodeAnim_mNodeName_set(swigCPtr, aiString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNodeAnim_mNodeName_get(swigCPtr);
      aiString ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiString(cPtr, false);
      return ret;
    } 
  }

  public aiAnimBehaviour mPreState {
    set {
      assimp_swigPINVOKE.aiNodeAnim_mPreState_set(swigCPtr, (int)value);
    } 
    get {
      aiAnimBehaviour ret = (aiAnimBehaviour)assimp_swigPINVOKE.aiNodeAnim_mPreState_get(swigCPtr);
      return ret;
    } 
  }

  public aiAnimBehaviour mPostState {
    set {
      assimp_swigPINVOKE.aiNodeAnim_mPostState_set(swigCPtr, (int)value);
    } 
    get {
      aiAnimBehaviour ret = (aiAnimBehaviour)assimp_swigPINVOKE.aiNodeAnim_mPostState_get(swigCPtr);
      return ret;
    } 
  }

  public aiVectorKeyArray PositionKeys {
    set {
      assimp_swigPINVOKE.aiNodeAnim_PositionKeys_set(swigCPtr, aiVectorKeyArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNodeAnim_PositionKeys_get(swigCPtr);
      aiVectorKeyArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVectorKeyArray(cPtr, false);
      return ret;
    } 
  }

  public aiQuatKeyArray RotationKeys {
    set {
      assimp_swigPINVOKE.aiNodeAnim_RotationKeys_set(swigCPtr, aiQuatKeyArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNodeAnim_RotationKeys_get(swigCPtr);
      aiQuatKeyArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiQuatKeyArray(cPtr, false);
      return ret;
    } 
  }

  public aiVectorKeyArray ScalingKeys {
    set {
      assimp_swigPINVOKE.aiNodeAnim_ScalingKeys_set(swigCPtr, aiVectorKeyArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiNodeAnim_ScalingKeys_get(swigCPtr);
      aiVectorKeyArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVectorKeyArray(cPtr, false);
      return ret;
    } 
  }

  public aiNodeAnim() : this(assimp_swigPINVOKE.new_aiNodeAnim(), true) {
  }

}

}
