//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiScene : global::System.IDisposable, Interface.Unmanagable<aiScene> {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiScene(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiScene obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiScene() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiScene(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public aiScene Unmanaged() {
    this.swigCMemOwn = false;
    return this;
  }

  public uint mFlags {
    set {
      assimp_swigPINVOKE.aiScene_mFlags_set(swigCPtr, value);
    } 
    get {
      uint ret = assimp_swigPINVOKE.aiScene_mFlags_get(swigCPtr);
      return ret;
    } 
  }

  public aiNode mRootNode {
    set {
      assimp_swigPINVOKE.aiScene_mRootNode_set(swigCPtr, aiNode.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiScene_mRootNode_get(swigCPtr);
      aiNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiNode(cPtr, false);
      return ret;
    } 
  }

  public aiMetadata mMetaData {
    set {
      assimp_swigPINVOKE.aiScene_mMetaData_set(swigCPtr, aiMetadata.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiScene_mMetaData_get(swigCPtr);
      aiMetadata ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiMetadata(cPtr, false);
      return ret;
    } 
  }

  public aiMeshArray Meshes {
    set {
      assimp_swigPINVOKE.aiScene_Meshes_set(swigCPtr, aiMeshArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiScene_Meshes_get(swigCPtr);
      aiMeshArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiMeshArray(cPtr, false);
      return ret;
    } 
  }

  public aiMaterialArray Materials {
    set {
      assimp_swigPINVOKE.aiScene_Materials_set(swigCPtr, aiMaterialArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiScene_Materials_get(swigCPtr);
      aiMaterialArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiMaterialArray(cPtr, false);
      return ret;
    } 
  }

  public aiAnimationArray Animations {
    set {
      assimp_swigPINVOKE.aiScene_Animations_set(swigCPtr, aiAnimationArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiScene_Animations_get(swigCPtr);
      aiAnimationArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiAnimationArray(cPtr, false);
      return ret;
    } 
  }

  public aiTextureArray Textures {
    set {
      assimp_swigPINVOKE.aiScene_Textures_set(swigCPtr, aiTextureArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiScene_Textures_get(swigCPtr);
      aiTextureArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiTextureArray(cPtr, false);
      return ret;
    } 
  }

  public aiLightArray Lights {
    set {
      assimp_swigPINVOKE.aiScene_Lights_set(swigCPtr, aiLightArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiScene_Lights_get(swigCPtr);
      aiLightArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiLightArray(cPtr, false);
      return ret;
    } 
  }

  public aiCameraArray Cameras {
    set {
      assimp_swigPINVOKE.aiScene_Cameras_set(swigCPtr, aiCameraArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiScene_Cameras_get(swigCPtr);
      aiCameraArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiCameraArray(cPtr, false);
      return ret;
    } 
  }

  public aiScene() : this(assimp_swigPINVOKE.new_aiScene(), true) {
  }

  public bool HasMeshes() {
    bool ret = assimp_swigPINVOKE.aiScene_HasMeshes(swigCPtr);
    return ret;
  }

  public bool HasMaterials() {
    bool ret = assimp_swigPINVOKE.aiScene_HasMaterials(swigCPtr);
    return ret;
  }

  public bool HasLights() {
    bool ret = assimp_swigPINVOKE.aiScene_HasLights(swigCPtr);
    return ret;
  }

  public bool HasTextures() {
    bool ret = assimp_swigPINVOKE.aiScene_HasTextures(swigCPtr);
    return ret;
  }

  public bool HasCameras() {
    bool ret = assimp_swigPINVOKE.aiScene_HasCameras(swigCPtr);
    return ret;
  }

  public bool HasAnimations() {
    bool ret = assimp_swigPINVOKE.aiScene_HasAnimations(swigCPtr);
    return ret;
  }

  public static string GetShortFilename(string filename) {
    string ret = assimp_swigPINVOKE.aiScene_GetShortFilename(filename);
    return ret;
  }

  public aiTexture GetEmbeddedTexture(string filename) {
    global::System.IntPtr cPtr = assimp_swigPINVOKE.aiScene_GetEmbeddedTexture(swigCPtr, filename);
    aiTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiTexture(cPtr, false);
    return ret;
  }

}

}
