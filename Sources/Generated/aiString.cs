//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiString : global::System.IDisposable, Interface.Unmanagable<aiString> {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiString(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiString obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiString() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiString(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public override string ToString() {
    return Data;
  }

  // We need to define manually this method because swig seems to not accept multiple 'cscode' typemaps for the same class
  public aiString Unmanaged() {
    this.swigCMemOwn = false;
    return this;
  }

  public aiString() : this(assimp_swigPINVOKE.new_aiString__SWIG_0(), true) {
  }

  public aiString(aiString rOther) : this(assimp_swigPINVOKE.new_aiString__SWIG_1(aiString.getCPtr(rOther)), true) {
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public aiString(string pString) : this(assimp_swigPINVOKE.new_aiString__SWIG_2(pString), true) {
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(string sz) {
    assimp_swigPINVOKE.aiString_Set(swigCPtr, sz);
  }

  public aiString op_set(aiString rOther) {
    aiString ret = new aiString(assimp_swigPINVOKE.aiString_op_set__SWIG_0(swigCPtr, aiString.getCPtr(rOther)), false);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public aiString op_set(string sz) {
    aiString ret = new aiString(assimp_swigPINVOKE.aiString_op_set__SWIG_1(swigCPtr, sz), false);
    return ret;
  }

  public bool op_equal(aiString other) {
    bool ret = assimp_swigPINVOKE.aiString_op_equal(swigCPtr, aiString.getCPtr(other));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool op_not_equal(aiString other) {
    bool ret = assimp_swigPINVOKE.aiString_op_not_equal(swigCPtr, aiString.getCPtr(other));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Append(string app) {
    assimp_swigPINVOKE.aiString_Append(swigCPtr, app);
  }

  public void Clear() {
    assimp_swigPINVOKE.aiString_Clear(swigCPtr);
  }

  public string C_Str() {
    string ret = assimp_swigPINVOKE.aiString_C_Str(swigCPtr);
    return ret;
  }

  public uint Length {
    set {
      assimp_swigPINVOKE.aiString_Length_set(swigCPtr, value);
    } 
    get {
      uint ret = assimp_swigPINVOKE.aiString_Length_get(swigCPtr);
      return ret;
    } 
  }

  public string Data {
    set {
      assimp_swigPINVOKE.aiString_Data_set(swigCPtr, value);
    } 
    get {
      string ret = assimp_swigPINVOKE.aiString_Data_get(swigCPtr);
      return ret;
    } 
  }

}

}
