//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiVector3D : global::System.IDisposable, Interface.Unmanagable<aiVector3D> {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiVector3D(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiVector3D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiVector3D() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiVector3D(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public aiVector3D Unmanaged() {
    this.swigCMemOwn = false;
    return this;
  }

  public aiVector3D() : this(assimp_swigPINVOKE.new_aiVector3D__SWIG_0(), true) {
  }

  public aiVector3D(float _x, float _y, float _z) : this(assimp_swigPINVOKE.new_aiVector3D__SWIG_1(_x, _y, _z), true) {
  }

  public aiVector3D(float _xyz) : this(assimp_swigPINVOKE.new_aiVector3D__SWIG_2(_xyz), true) {
  }

  public aiVector3D(aiVector3D o) : this(assimp_swigPINVOKE.new_aiVector3D__SWIG_3(aiVector3D.getCPtr(o)), true) {
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public aiVector3D op_add_and_set(aiVector3D o) {
    aiVector3D ret = new aiVector3D(assimp_swigPINVOKE.aiVector3D_op_add_and_set(swigCPtr, aiVector3D.getCPtr(o)), false);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public aiVector3D op_sub_and_set(aiVector3D o) {
    aiVector3D ret = new aiVector3D(assimp_swigPINVOKE.aiVector3D_op_sub_and_set(swigCPtr, aiVector3D.getCPtr(o)), false);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public aiVector3D op_mul_and_set(float f) {
    aiVector3D ret = new aiVector3D(assimp_swigPINVOKE.aiVector3D_op_mul_and_set__SWIG_0(swigCPtr, f), false);
    return ret;
  }

  public aiVector3D op_div_and_set(float f) {
    aiVector3D ret = new aiVector3D(assimp_swigPINVOKE.aiVector3D_op_div_and_set(swigCPtr, f), false);
    return ret;
  }

  public aiVector3D op_mul_and_set(aiMatrix3x3 mat) {
    aiVector3D ret = new aiVector3D(assimp_swigPINVOKE.aiVector3D_op_mul_and_set__SWIG_1(swigCPtr, aiMatrix3x3.getCPtr(mat)), false);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public aiVector3D op_mul_and_set(aiMatrix4x4 mat) {
    aiVector3D ret = new aiVector3D(assimp_swigPINVOKE.aiVector3D_op_mul_and_set__SWIG_2(swigCPtr, aiMatrix4x4.getCPtr(mat)), false);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float op_get(uint i) {
    float ret = assimp_swigPINVOKE.aiVector3D_op_get(swigCPtr, i);
    return ret;
  }

  public bool op_equal(aiVector3D other) {
    bool ret = assimp_swigPINVOKE.aiVector3D_op_equal(swigCPtr, aiVector3D.getCPtr(other));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool op_not_equal(aiVector3D other) {
    bool ret = assimp_swigPINVOKE.aiVector3D_op_not_equal(swigCPtr, aiVector3D.getCPtr(other));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool op_lesser(aiVector3D other) {
    bool ret = assimp_swigPINVOKE.aiVector3D_op_lesser(swigCPtr, aiVector3D.getCPtr(other));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equal(aiVector3D other, float epsilon) {
    bool ret = assimp_swigPINVOKE.aiVector3D_Equal__SWIG_0(swigCPtr, aiVector3D.getCPtr(other), epsilon);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equal(aiVector3D other) {
    bool ret = assimp_swigPINVOKE.aiVector3D_Equal__SWIG_1(swigCPtr, aiVector3D.getCPtr(other));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set(float pX, float pY, float pZ) {
    assimp_swigPINVOKE.aiVector3D_Set(swigCPtr, pX, pY, pZ);
  }

  public float SquareLength() {
    float ret = assimp_swigPINVOKE.aiVector3D_SquareLength(swigCPtr);
    return ret;
  }

  public float Length() {
    float ret = assimp_swigPINVOKE.aiVector3D_Length(swigCPtr);
    return ret;
  }

  public aiVector3D Normalize() {
    aiVector3D ret = new aiVector3D(assimp_swigPINVOKE.aiVector3D_Normalize(swigCPtr), false);
    return ret;
  }

  public aiVector3D NormalizeSafe() {
    aiVector3D ret = new aiVector3D(assimp_swigPINVOKE.aiVector3D_NormalizeSafe(swigCPtr), false);
    return ret;
  }

  public aiVector3D SymMul(aiVector3D o) {
    aiVector3D ret = new aiVector3D(assimp_swigPINVOKE.aiVector3D_SymMul(swigCPtr, aiVector3D.getCPtr(o)), true);
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float x {
    set {
      assimp_swigPINVOKE.aiVector3D_x_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiVector3D_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      assimp_swigPINVOKE.aiVector3D_y_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiVector3D_y_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      assimp_swigPINVOKE.aiVector3D_z_set(swigCPtr, value);
    } 
    get {
      float ret = assimp_swigPINVOKE.aiVector3D_z_get(swigCPtr);
      return ret;
    } 
  }

}

}
