//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Assimp {

public class aiVectorKey : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiVectorKey(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(aiVectorKey obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiVectorKey() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          assimp_swigPINVOKE.delete_aiVectorKey(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public double mTime {
    set {
      assimp_swigPINVOKE.aiVectorKey_mTime_set(swigCPtr, value);
    } 
    get {
      double ret = assimp_swigPINVOKE.aiVectorKey_mTime_get(swigCPtr);
      return ret;
    } 
  }

  public aiVector3D mValue {
    set {
      assimp_swigPINVOKE.aiVectorKey_mValue_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = assimp_swigPINVOKE.aiVectorKey_mValue_get(swigCPtr);
      aiVector3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public aiVectorKey() : this(assimp_swigPINVOKE.new_aiVectorKey__SWIG_0(), true) {
  }

  public aiVectorKey(double time, aiVector3D value) : this(assimp_swigPINVOKE.new_aiVectorKey__SWIG_1(time, aiVector3D.getCPtr(value)), true) {
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool op_equal(aiVectorKey rhs) {
    bool ret = assimp_swigPINVOKE.aiVectorKey_op_equal(swigCPtr, aiVectorKey.getCPtr(rhs));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool op_not_equal(aiVectorKey rhs) {
    bool ret = assimp_swigPINVOKE.aiVectorKey_op_not_equal(swigCPtr, aiVectorKey.getCPtr(rhs));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool op_lesser(aiVectorKey rhs) {
    bool ret = assimp_swigPINVOKE.aiVectorKey_op_lesser(swigCPtr, aiVectorKey.getCPtr(rhs));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool op_greater(aiVectorKey rhs) {
    bool ret = assimp_swigPINVOKE.aiVectorKey_op_greater(swigCPtr, aiVectorKey.getCPtr(rhs));
    if (assimp_swigPINVOKE.SWIGPendingException.Pending) throw assimp_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
